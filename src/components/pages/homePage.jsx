import React, {useState, useEffect, useCallback} from 'react';
import { useNavigate } from 'react-router-dom';
import SectionCarousel from '../UI/SectionCarousel.jsx';
import { useApp } from '../../context/AppContext.jsx';
import { Loader2, Sparkles } from 'lucide-react';

export default function HomePage() {
    const { setGeneratedPlaylist, userHasStoredMood } = useApp();
    const navigate = useNavigate();
    const [moodInput, setMoodInput] = useState('');
    const [isLoadingMoodPlaylist, setIsLoadingMoodPlaylist] = useState(false);
    const [moodPlaylistError, setMoodPlaylistError] = useState(null);

    const generatePlaylist = useCallback(async (moodToUse, isAutoGenerated = false) => {
        if(!moodToUse.trim()) {
            setMoodPlaylistError("Please enter your mood to generate playlist.");
            return;
        }

        setIsLoadingMoodPlaylist(true);
        setMoodPlaylistError(null);
        setGeneratedPlaylist(null);

        try {
            const prompt = `Generate a list of 5-7 song recommendations (title and artist) that perfectly match a "${moodToUse}" mood. Provide the output JSON array of objects, each with 'title' and 'artist' keys. Also, provide a mock 'videoId' (a short random string like 'abc123def') for demonstration purposes.`;

            const payload = {
                prompt: prompt,
                generationConfig: {
                    temperature: 0.7,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 1024,
                }
            };

            console.log('Sending request to server:', JSON.stringify(payload, null, 2));

            const apiUrl = 'http://localhost:3001/api/generate-mood-playlist';

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to generate playlist');
            }

            const playlist = await response.json();
            console.log('Received playlist from server:', playlist);

            if (!playlist || !playlist.songs || !Array.isArray(playlist.songs)) {
                throw new Error('Invalid playlist data received from server');
            }

            setGeneratedPlaylist(playlist);
            navigate('/playlists');
        } catch (error) {
            console.error("Error generating mood playlist:", error);
            setMoodPlaylistError(`Failed to generate playlist: ${error.message}`);
        } finally {
            setIsLoadingMoodPlaylist(false);
        }
    }, [setGeneratedPlaylist, navigate]);

    useEffect(() => {
        if(userHasStoredMood) {
            const storedMood = localStorage.getItem('userMood');
            if(storedMood) {
                console.log("Stored mood:", storedMood);
            }
        }
    }, [userHasStoredMood]);

    const albumCard = [
        {id: 1, title: 'Album Title One', artist: 'Artist A', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album1'},
        { id: 2, title: 'Another Album', artist: 'Artist B', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album2' },
        { id: 3, title: 'Greatest Hits', artist: 'Artist C', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album3' },
        { id: 4, title: 'Chill Beats', artist: 'Artist D', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album4' },
        { id: 5, title: 'Rock Anthems', artist: 'Artist E', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album5' },
        { id: 6, title: 'Pop Sensations', artist: 'Artist F', imageUrl: 'https://placehold.co/150x150/282828/FFFFFF?text=Album6' }, 
    ];

    const playlistCard = [
        { id: 1, title: 'Daily Mix 1', description: 'Artist G, Artist H', imageUrl: 'https://placehold.co/150x150/AA60C8/FFFFFF?text=Mix1' },
        { id: 2, title: 'Discover Weekly', description: 'New songs for you', imageUrl: 'https://placehold.co/150x150/AA60C8/FFFFFF?text=Mix2' },
        { id: 3, title: 'Workout Jams', description: 'High energy tracks', imageUrl: 'https://placehold.co/150x150/AA60C8/FFFFFF?text=Mix3' },
        { id: 4, title: 'Relaxing Instrumentals', description: 'Focus and calm', imageUrl: 'https://placehold.co/150x150/AA60C8/FFFFFF?text=Mix4' },
    ];

    return(
        <div className="min-h-screen bg-dark-bg text-text-light">
            <div className="p-6">
                <h2 className='text-3xl font-bold mb-6'>Good afternoon, User!</h2>

                {/* mood-based playlist section (Manual Input) */}
                <div className='mb-8 bg-dark-card p-6 rounded-lg shadow-lg'>
                    <h3 className='text-2xl font-bold mb-4 flex items-center gap-2'>
                        <Sparkles className='w-6 h-6 text-purple-400' />
                        Create a Mood Playlist (Manual)
                    </h3>
                    <p className='text-text-medium mb-4'>Tell us how you're feeling, and Spotimood will suggest a playlist just for you.</p>
                    <textarea 
                    className='w-full bg-dark-bg text-text-light rounded-md p-3 mb-4 focus:outline-none focus:ring-2 focus:ring-primary-purple' 
                    rows='3' 
                    placeholder="e.g., 'feeling melancholic and reflective', 'energetic and ready to dance', 'calm and focused'"
                    value={moodInput}
                    onChange={(e) => setMoodInput(e.target.value)}>
                    </textarea>
                    {moodPlaylistError && (
                        <p className='text-red-400 text-sm mb-4'>{moodPlaylistError}</p>
                    )}
                    <button
                    onClick={() => generatePlaylist(moodInput, false)}
                    className='bg-primary-purple text-text-light px-6 py-3 rounded-full font-bold text-lg flex items-center justify-center space-x-2 hover:bg-[#C879E6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed w-full md:w-auto'
                    disabled={isLoadingMoodPlaylist}
                    >
                        {isLoadingMoodPlaylist ? (
                            <>
                                                        <Loader2 className='animate-spin h-5 w-5 text-text-light' />
                                <span>Generating...</span>
                            </>
                        ) : 'Generate Mood Playlist'}
                    </button>
                </div>
                <SectionCarousel title='Recently Played' items={albumCard} type='album' />
                <SectionCarousel title='Made for You' items={playlistCard} type='playlist' />
            </div>
        </div>
    );
}